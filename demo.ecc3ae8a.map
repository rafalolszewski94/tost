{"version":3,"sources":["src/utils.js","src/Tost.js","src/Tosts.js","src/index.js","demo/demo.js"],"names":["utils","CONSTANTS","s4","Math","floor","random","toString","substring","type","tostType","Object","keys","find","key","Tost","tostsInstance","_id","guid","add","options","Error","Promise","resolve","_add","tost","document","createElement","classList","isValidTostType","dataset","id","innerHTML","content","_attachCloseListener","querySelector","_appendToContainer","el","addEventListener","e","preventDefault","destroy","log","tostToDestroy","parentNode","removeChild","appendChild","Tosts","all","_createContainer","container","then","tostID","push","body","tosts","tostTrigger","tostContent","value","destroyAllTosts","destroyBtn","getElementById"],"mappings":";AAmCeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAnCf,IAAMC,EAAY,CACV,KAAA,OACG,QAAA,UACA,QAAA,UACF,MAAA,SAGHD,EAAQ,CAAA,KAKL,WACIE,SAAAA,IACAC,OAAAA,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WACvBC,SAAS,IACTC,UAAU,GAGVL,OAAAA,IAAOA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAOA,IAAOA,KAZtE,gBAoBIM,SAAAA,GACRC,IAAAA,EAAWC,OAAOC,KAAKV,GAAWW,KAAK,SAACC,GACrCZ,OAAAA,EAAUY,KAASL,IAErBP,OAAAA,EAAUQ,KAINT,QAAAA,QAAAA;;ACuCAc,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,IAAAA,EAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,OAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GA1Ef,EAAA,QAAA,WA0EeA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAxETA,IAAAA,EAAAA,WACQC,SAAAA,EAAAA,GAAe,IAAA,EAAA,KAAA,EAAA,KAAA,GACpBC,KAAAA,IAAMhB,EAAMiB,QAAAA,OACZF,KAAAA,cAAgBA,EAEhBG,KAAAA,IAAM,SAACC,GACN,IAACA,EACG,MAAA,IAAIC,MAAM,6CAGX,OAAA,IAAIC,QAAQ,SAACC,GACV,EAAA,EAAKC,KAAKJ,OA6DXL,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,OAnDRK,MAAAA,SAAAA,GACGK,IAAAA,EAAOC,SAASC,cAAc,OAW7B,OAVFC,EAAAA,UAAUT,IAAf,QAEIlB,EAAM4B,QAAAA,gBAAgBT,EAAQX,OAC3BmB,EAAAA,UAAUT,IAAYC,QAAAA,EAAQX,MAEhCqB,EAAAA,QAAQC,GAAK,KAAKd,IAClBe,EAAAA,UAAqBZ,UAAAA,GAAWA,EAAQa,SAA7C,sDACKC,KAAAA,qBAAqBT,EAAKU,cAAc,eAAgB,KAAKlB,KAC7DmB,KAAAA,mBAAmBX,GAEjB,KAAKR,MAuCDF,CAAAA,IAAAA,uBA9BQsB,MAAAA,SAAAA,EAAIN,GAAI,IAAA,EAAA,KACxBO,EAAAA,iBAAiB,QAAS,SAACC,GAC1BC,EAAAA,iBACGC,EAAAA,QAAQV,OA2BJhB,CAAAA,IAAAA,UAnBLgB,MAAAA,SAAAA,GACEW,QAAAA,IAAI,yBAA0BX,GAChCY,IAAAA,EAAgBjB,SAASS,cAA2BJ,aAAAA,EAA1D,MACca,EAAAA,WAAWC,YAAYF,KAgB1B5B,CAAAA,IAAAA,qBARMU,MAAAA,SAAAA,GACZA,GAGAT,KAAAA,cAAcqB,GAAGS,YAAYrB,OAIvBV,EAxETA,GAwESA,QAAAA,QAAAA;;ACpCAgC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,IAAAA,EAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,OAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAtCf,EAAA,QAAA,UAsCeA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCApCTA,IAAAA,EAAAA,WAKQ3B,SAAAA,EAAAA,GAAS,IAAA,EAAA,KAAA,EAAA,KAAA,GACdA,KAAAA,QAAUA,GAAW,GACrB4B,KAAAA,IAAM,GACNC,KAAAA,mBAEA9B,KAAAA,IAAM,SAACC,GACLI,EAAAA,KAAKJ,IAyBD2B,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,OArBR3B,MAAAA,SAAAA,GAAS,IAAA,EAAA,KACRL,IAAAA,EAAJ,QAAS,CACH,GAAA,KAAKmC,YACR/B,IAAIC,GACF+B,KAAK,SAACC,GACAJ,EAAAA,IAAIK,KAAKD,OAgBTL,CAAAA,IAAAA,mBAZM,MAAA,WACbrB,IAAAA,SAAS4B,KAAKnB,cAAc,mBAA5BT,CAIEwB,IAAAA,EAAYxB,SAASC,cAAc,OAC/BC,EAAAA,UAAUT,IAAI,kBACnB+B,KAAAA,UAAYA,EACRI,SAAAA,KAAKR,YAAY,KAAKI,gBAIpBH,EApCTA,GAoCSA,QAAAA,QAAAA;;ACpCAA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAFf,IAAA,EAAA,QAAA,WAEeA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,QAAAA,QAAAA,EAAAA;;ACoBf,aAtBA,IAAA,EAAA,QAAA,UAsBA,EAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GApBA,IAAMQ,EAAQ,IAAIR,EAAJ,QAERS,EAAc9B,SAASS,cAAc,eAE3CqB,EAAYlB,iBAAiB,QAAS,WAC9BmB,IAAAA,EAAc/B,SAASS,cAAc,iBAAiBuB,MACtDhD,EAAWgB,SAASS,cAAc,cAAcuB,MAEhDvC,EAAAA,IAAI,CACCsC,QAAAA,EACH/C,KAAAA,MAIV,IAAMiD,EAAkB,WAEdjB,QAAAA,IAAIa,EAAMP,MAGdY,EAAalC,SAASmC,eAAe,cAC3CD,EAAWtB,iBAAiB,QAAS,WAAMqB,OAAAA","file":"demo.ecc3ae8a.map","sourceRoot":"..","sourcesContent":["const CONSTANTS = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error',\n};\n\nconst utils = {\n  /**\n   * Generate random but not a real guid string.\n   * @returns {string}\n   */\n  guid() {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n          .toString(16)\n          .substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  },\n\n  /**\n   * Checks if {type} is in {CONSTANTS} object value.\n   * @param type {string}\n   * @returns {*}\n   */\n  isValidTostType(type) {\n    const tostType = Object.keys(CONSTANTS).find((key) => {\n      return CONSTANTS[key] === type;\n    });\n    return CONSTANTS[tostType];\n  },\n};\n\nexport default utils;\n","import utils from \"./utils\";\n\nclass Tost {\n  constructor(tostsInstance) {\n    this._id = utils.guid();\n    this.tostsInstance = tostsInstance;\n\n    this.add = (options) => {\n      if (!options) {\n        throw new Error('Tost.add() requires options to be passed.');\n      }\n\n      return new Promise((resolve) => {\n        resolve(this._add(options));\n      });\n    }\n  }\n\n  /**\n   * Create new tost element and append it to the container.\n   * @param options\n   * @private\n   */\n  _add(options) {\n    const tost = document.createElement('div');\n    tost.classList.add(`tost`);\n\n    if (utils.isValidTostType(options.type)) {\n      tost.classList.add(`tost-${options.type}`);\n    }\n    tost.dataset.id = this._id;\n    tost.innerHTML = `<span>${options && options.content}</span> <button class=\"tost-close\">&times;</button>`;\n    this._attachCloseListener(tost.querySelector('.tost-close'), this._id);\n    this._appendToContainer(tost);\n\n    return this._id;\n  }\n\n  /**\n   *\n   * @param el\n   * @param id\n   * @private\n   */\n  _attachCloseListener(el, id) {\n    el.addEventListener('click', (e) => {\n      e.preventDefault();\n      this.destroy(id);\n    });\n  }\n\n  /**\n   * Destroy tost of {id}\n   * @param id {int}\n   */\n  destroy(id) {\n    console.log('destroying tost of id:', id);\n    const tostToDestroy = document.querySelector(`[data-id=\"${id}\"]`);\n    tostToDestroy.parentNode.removeChild(tostToDestroy);\n  }\n\n  /**\n   *\n   * @param tost {HTMLElement}\n   * @private\n   */\n  _appendToContainer(tost) {\n    if (!tost) {\n      return;\n    }\n    this.tostsInstance.el.appendChild(tost);\n  }\n}\n\nexport default Tost;\n","import Tost from './Tost';\n\nclass Tosts {\n  /**\n   * Main constructor\n   * @param options\n   */\n  constructor(options) {\n    this.options = options || {};\n    this.all = [];\n    this._createContainer();\n\n    this.add = (options) => {\n      this._add(options);\n    }\n  }\n\n  _add(options) {\n    new Tost({\n      el: this.container,\n    }).add(options)\n        .then((tostID) => {\n          this.all.push(tostID);\n        });\n  }\n\n  _createContainer() {\n    if (document.body.querySelector('.tost-container')) {\n      return;\n    }\n\n    const container = document.createElement('div');\n    container.classList.add('tost-container');\n    this.container = container;\n    document.body.appendChild(this.container);\n  }\n}\n\nexport default Tosts;\n","import Tosts from './Tosts';\n\nexport default Tosts;\n","import Tosts from '../src';\n\nconst tosts = new Tosts();\n\nconst tostTrigger = document.querySelector('[data-tost]');\n\ntostTrigger.addEventListener('click', () => {\n  const tostContent = document.querySelector('#tost_content').value;\n  const tostType = document.querySelector('#tost_type').value;\n\n  tosts.add({\n    content: tostContent,\n    type: tostType,\n  });\n});\n\nconst destroyAllTosts = () => {\n  // tosts.all.forEach(tost => tosts.destroy(tost.id));\n  console.log(tosts.all);\n};\n\nconst destroyBtn = document.getElementById('destroyAll');\ndestroyBtn.addEventListener('click', () => destroyAllTosts());\n"]}